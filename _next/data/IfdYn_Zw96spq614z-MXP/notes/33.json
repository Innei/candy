{"pageProps":{"title":"剖析某运动软件api","nid":33,"created":"2020-09-05T11:07:21.263Z","modified":"2020-09-05T11:06:28.000Z","content":"---\ndate: 2019-03-08T03:42:00.000Z\nupdated: 2020-09-04T18:03:17.399Z\ntitle: 剖析某运动软件api\nslug: 剖析某运动软件api\nid: 15\npermalink: notes/15\ntype: Note\n---\n\n这学期学校采用某款外包公司的运动软件来强制性制定运动项目.\r\n\r\n名字我不说了.\r\n\r\n下面来剖析该软件与服务器之间的交互.分析出他的api是怎么样的\r\n\r\n安卓7以下使用packet capture进行抓包. 安卓7以上SSL通信无法正常进行.\r\n\r\n这里没图 自己抓.我把我抓到的和post出去的json解释一遍.\r\n\r\n```json\r\n{\r\n\t\"startTime\":1551860831865,  //时间截\r\n\t\"runningSportId\":\t18,  // 18对应快走，19对应慢跑，20对应快跑 后来通过某种方式得知 212223也对应 应该是跟学校有关 1 2 3 也是\r\n\t\"studentId\":\t47xxx,  // 应该是本人唯一值\r\n}\r\n\r\n// response start\r\n{\r\n\t\r\n\t\"id\": 5457xx,  // 后面的activity id 唯一值\r\n\t\"runningSportId\": 18,  // 快走id\r\n\t\"endRunningSportId\": null,\r\n\t\"studentId\": 47580,\r\n\t\"distance\": null,\r\n\t\"stepCount\": null,\r\n\t\"costTime\": null,\r\n\t\"speed\": null,\r\n\t\"stepPerSecond\": null,\r\n\t\"distancePerStep\": null,\r\n\t\"targetFinishedTime\": null,\r\n\t\"startTime\": 1551860832272,  // 当前服务器时间截(毫秒) 13位\r\n\t\"kcalConsumed\": null,\r\n\t\"qualified\": null,\r\n\t\"isValid\": null,\r\n\t\"isVerified\": null,\r\n\t\"qualifiedDistance\": 4000,\r\n\t\"qualifiedCostTime\": 3360,\r\n\t\"minCostTime\": null,\r\n\t\"endedAt\": null,\r\n\t\"endedBy\": null\r\n\r\n}\r\n\r\n// activitydata\r\n{\r\n\t\"distancePerStep\": 0.0,\r\n\t\"locationType\": 2,\r\n\t\"stepCountCal\": 0,\r\n\t\"longitude\": 120.xxxx,\r\n\t\"activityId\": 551760,\r\n\t\"latitude\": 27.9xxxxx, //坐标\r\n\t\"stepCount\": 0,\r\n\t\"isNormal\": true,\r\n\t\"distance\": 0,\r\n\t\"stepPerSecond\": 0.0,\r\n\t\r\n}\r\n\r\n// response data\r\n{\r\n\r\n\t\"statusMsg\": \"数据提交成功\",\r\n\t\"obj\": {\r\n\t\t\"id\": 64822721, // 随机值\r\n\t\t\"activityId\": 5457xx, // start返回唯一值id\r\n\t\t\"acquisitionTime\": 1551860832729, //当前服务器时间截(毫秒) 13位\r\n\t\t\"stepCount\": 0,\r\n\t\t\"stepCountCal\": 0,\r\n\t\t\"distance\": 0,\r\n\t\t\"distancePerStep\": 0.0,\r\n\t\t\"stepPerSecond\": 0.0,\r\n\t\t\"longitude\": 120.7071,\r\n\t\t\"latitude\": 27.916,\r\n\t\t\"locationType\": 4,\r\n\t\t\"isNormal\": true\r\n\r\n\t}\r\n}\r\n\r\n\r\n// end request\r\n{\r\n\t\"targetFinishedTime\":0,\r\n\t\"costTime\"\t:141,  // 秒\r\n\t\"distance\":\t0, // 米\r\n\t\"stepCount\"\t:0, \r\n\t\"id\":545712, // 一次运动 唯一值\r\n}\r\n// response\r\n{\r\n\t\"id\": 545712,\r\n\t\"runningSportId\": 18,\r\n\t\"endRunningSportId\": 18,\r\n\t\"studentId\": 47580,\r\n\t\"distance\": 0,\r\n\t\"stepCount\": 0,\r\n\t\"costTime\": 141,\r\n\t\"speed\": 0.0,\r\n\t\"stepPerSecond\": 0.0,\r\n\t\"distancePerStep\": 0.0,\r\n\t\"targetFinishedTime\": 0,\r\n\t\"startTime\": 1551860832000,\r\n\t\"kcalConsumed\": 4,\r\n\t\"qualified\": false,\r\n\t\"isValid\": true,\r\n\t\"isVerified\": false,\r\n\t\"qualifiedDistance\": 4000,\r\n\t\"qualifiedCostTime\": 3360,\r\n\t\"minCostTime\": 0,\r\n\t\"endedAt\": 1551860975504,\r\n\t\"endedBy\": null\r\n}\r\n```\r\n\r\n与api的交互包\r\n![](https://ws2.sinaimg.cn/large/006tKfTcgy1g0v831u966j30s40nhnb2.jpg)\r\n![](https://ws3.sinaimg.cn/large/006tKfTcgy1g0v8m3pwukj30s40nh4ci.jpg)\r\n\r\n总体过程:\r\n\r\n首先向服务器发送一个start请求,可以看到start的header里有一个Authorization: 后面是JWT加密,通过一个.前面的用base64解密 发现是sha512加密.这里估计是个bug,只要你登陆上去抓到这个Authorization就行了,而且这个不是重点,因为JWT最后一位随便改个大写字母都行.但是这个Authorization不可缺. 确定用户的唯一值是 StudentId\r\n下面看传出的data\r\n首先是有个id 这个id很重要决定了本次运动的id唯一值,只要没有发送end指令,就可以向服务器发送runningactivityData.\r\n\r\n然后不停的向服务器发送runningactivityData\r\n这是什么,看看data和回传的json\r\n\r\n发现这是实时距离,步数,位置(经纬度)等等\r\n\r\n再来看看end\r\n\r\n也是这些东西,而且这些东西都可以伪造. 结果取得是end发送的结果. 也就是说前面的runningactivityData只是用来绘制路线而已, 也是判断作弊用的吧\r\n\r\n### post模拟(v1.0 .路径模拟.)\r\n\r\n说干就干 用python 进行模拟\r\n```python\r\nimport requests\r\nimport time\r\nimport json\r\nimport random\r\nfrom math import radians, cos, sin, asin, sqrt, pow\r\nurl = 'https://api.guangyangyundong.com/'\r\nmillis = int(round(time.time() * 1000))  # 获取时间截\r\nr = requests.session()\r\nstart_time = int(time.time())\r\n\r\n# 全局变量\r\ndistance = 0\r\nlongitude = 120.70645\r\nlatitude = 27.917463\r\nlon1 = 120.70645\r\nlat1 = 27.917463\r\nlon2 = 120.70645\r\nlat2 = 27.917463\r\nstepCount = 0\r\ntargetFinishedTime = 0\r\n\r\n# start\r\nheaders = {\r\n    'User-Agent': 'Mozilla/5.0 (Linux; U; Android 5.1; zh-cn; MX4 Build/LMY47I) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36',\r\n    'Authorization': '',\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n}\r\ndata = {\r\n    'startTime': millis,\r\n    'runningSportId': 20,  # 跑步模式\r\n    'studentId': xxxxx,\r\n}\r\n\r\njs = r.post(url + 'api/runningActivities/start',\r\n            data=data, headers=headers).content\r\njs = json.loads(js)\r\nid = js[\"id\"]  # 获取当前运动id\r\n\r\nprint(id)\r\n\r\n# end activity\r\n\r\n\r\ndef end():\r\n    global distance, targetFinishedTime, stepCount\r\n    time.sleep(random.randint(2, 3))  # 模拟停止动作\r\n    end_time = int(time.time()) - start_time  # 间隔时间\r\n    end_data = {\r\n\r\n        \"targetFinishedTime\": targetFinishedTime,  # 预测是目标完成时间\r\n        \"costTime\": end_time,\r\n        \"distance\": distance,  # 最后一次activity的距离\r\n        \"stepCount\": stepCount,  # 步数？？\r\n        \"id\": id,\r\n    }\r\n\r\n    end_running = r.post(url + 'api/runningActivities/end',\r\n                         data=end_data, headers=headers).content\r\n    end_running = json.loads(end_running)\r\n    print(end_running)\r\n    exit(0)  # 退出\r\n\r\n\r\ndef haversine(lon1, lat1, lon2, lat2):  # 经度1，纬度1，经度2，纬度2 （十进制度数）\r\n    \"\"\"\r\n    Calculate the great circle distance between two points\r\n    on the earth (specified in decimal degrees)\r\n    \"\"\"\r\n    # 将十进制度数转化为弧度\r\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\r\n\r\n    # haversine公式\r\n    dlon = lon2 - lon1\r\n    dlat = lat2 - lat1\r\n    a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2\r\n    c = 2 * asin(sqrt(a))\r\n    r = 6371  # 地球平均半径，单位为公里\r\n    return c * r * 1000\r\n\r\n# running activity data post\r\n\r\n\r\ndef anti_activity():  # 回走函数\r\n    global longitude, latitude, lat1, lon1, lat2, lon2, stepCount, distance, start_time, targetFinishedTime\r\n    if distance >= 1000:\r\n        targetFinishedTime = int(time.time()) - start_time\r\n        end()  # 1000m 结束 计算用时\r\n        return\r\n    rand = round(random.randint(1, 100) / 100) / 4200   # 引入随机值\r\n    lon2 = lon1 + pow(-1, random.randint(0, 1)) * \\\r\n        round(random.randint(1, 100) / 100) / 1000000  # 左右偏移\r\n    lat2 = lat1 - rand\r\n\r\n    distance = round(distance + haversine(lon1, lat1, lon2, lat2))  # 总距离\r\n    distance_per = haversine(lon1, lat1, lon2, lat2)\r\n    stepCount_per = distance_per / 0.6\r\n    stepCount = round(distance_per / 0.6 + stepCount)\r\n    activity_data = {\r\n        # 每秒走了多少步\r\n        \"distancePerStep\": round(2.4 - random.randint(10, 60) / 100, 1),\r\n        \"locationType\": 1,  # 根据高德api 应返回1 为GPS定位\r\n        \"stepCountCal\": stepCount - random.randint(2, 8),  # 比总步数小一点 未证实\r\n        \"longitude\": lon1,  # 经纬度\r\n        \"activityId\": id,  # id唯一值\r\n        \"latitude\": lat1,\r\n        \"stepCount\": stepCount,  # 总步数\r\n        \"isNormal\": 'true',  # 未证实\r\n        \"distance\": distance,  # 距离累加 end应返回最后一个distance\r\n        # 平均速度\r\n        \"stepPerSecond\": round(3.5 - random.randint(100, 200) / 1000, 1),\r\n    }\r\n\r\n    lon1 = lon2\r\n    lat1 = lat2\r\n\r\n    print(\"当前经纬度\", longitude)\r\n    print(latitude)\r\n    print(\"总距离\", distance)\r\n    print(\"每次位移差\", distance_per)\r\n    print('总步数', stepCount)\r\n    print(\"每次步数\", stepCount_per)\r\n    print(\"每秒走多少步\", activity_data[\"distancePerStep\"])\r\n    print(\"平均速度\", activity_data[\"stepPerSecond\"])\r\n    log = r.post(url + 'api/runningActivityData',\r\n                 headers=headers, data=activity_data).content\r\n    log = json.loads(log)\r\n    print(log)\r\n    return\r\n\r\n\r\ndef activity():\r\n    global longitude, latitude, lat1, lon1, lat2, lon2, stepCount, distance, start_time, targetFinishedTime\r\n    if distance >= 600:  # 如果大于630米要转弯 我觉得返回跑比较好 差不多这个点\r\n        anti_activity()\r\n        # targetFinishedTime = int(time.time()) - start_time\r\n        return\r\n    rand = random.randint(1, 100000) / 100000000\r\n    lon2 = lon1 + pow(-1, random.randint(0, 1)) * \\\r\n        round(random.randint(1, 100) / 100) / 1000000  # 左右偏移 # 引入随机值\r\n    lat2 = lat1 + rand\r\n\r\n    distance = round(distance + haversine(lon1, lat1, lon2, lat2))  # 总距离\r\n    distance_per = haversine(lon1, lat1, lon2, lat2)\r\n    stepCount_per = distance_per / 0.6\r\n    stepCount = round(distance_per / 0.6 + stepCount)\r\n    activity_data = {\r\n        # 每秒走了多少步\r\n        \"distancePerStep\": round(2.4 - random.randint(10, 60) / 100, 1),\r\n        \"locationType\": 1,  # 根据高德api 应返回1 为GPS定位\r\n        \"stepCountCal\": stepCount - random.randint(2, 8),  # 比总步数小一点 未证实\r\n        \"longitude\": lon1,  # 经纬度\r\n        \"activityId\": id,  # id唯一值\r\n        \"latitude\": lat1,\r\n        \"stepCount\": stepCount,  # 总步数\r\n        \"isNormal\": 'true',  # 未证实\r\n        \"distance\": distance,  # 距离累加 end应返回最后一个distance\r\n        # 平均速度\r\n        \"stepPerSecond\": round(3.5 - random.randint(100, 200) / 1000, 1),\r\n    }\r\n    lon1 = lon2\r\n    lat1 = lat2\r\n    print(\"当前经纬度\", longitude)\r\n    print(latitude)\r\n    print(\"总距离\", distance)\r\n    print(\"每次位移差\", distance_per)\r\n    print('总步数', stepCount)\r\n    print(\"每次步数\", stepCount_per)\r\n    print(\"每秒走多少步\", activity_data[\"distancePerStep\"])\r\n    log = r.post(url + 'api/runningActivityData',\r\n                 headers=headers, data=activity_data).content\r\n    log = json.loads(log)\r\n    print(log)\r\n\r\n\r\nn = 0\r\nwhile n < 90:\r\n    activity()\r\n    n = n + 1\r\n    rand_time = random.randint(300, 400) / 100\r\n    print('sleep ', rand_time, ' s\\n')\r\n    time.sleep(rand_time)  # 睡眠然后再次提交数据\r\nend()\r\n\r\n```\r\n\r\n![](https://ws3.sinaimg.cn/large/006tKfTcly1g0wpzstbrxj30sf0gnwlw.jpg)\r\n\r\n希望有大佬可以进行完善,等等我会在github开源 希望有交流讨论\r\n\r\n#### 后续研究\r\n\r\n该api存在严重漏洞.\r\n比如可以根据studentId获取到任意学生的运动数据,不需要传入header.\r\n然后根据id能获取每次运动路径\r\n比如\r\n```json\r\nid = 544237\r\n{\r\n  \"errors\": [],\r\n  \"data\": {\r\n    \"runningActivity\": {\r\n      \"distance\": 1711,\r\n      \"costTime\": 2312,\r\n      \"endedAt\": 1551893421000,\r\n      \"qualifiedDistance\": 800,\r\n      \"qualifiedCostTime\": 300,\r\n      \"kcalConsumed\": 387,\r\n      \"qualified\": false,\r\n      \"isValid\": true,\r\n      \"isVerified\": true,\r\n      \"runningSport\": {\r\n        \"name\": \"快跑\"\r\n      },\r\n      \"data\": [\r\n        {\r\n          \"longitude\": 120.701575,\r\n          \"latitude\": 27.921444,\r\n          \"isNormal\": true,\r\n          \"locationType\": 5,\r\n          \"stepCount\": 0,\r\n          \"distance\": 0,\r\n          \"acquisitionTime\": 1551850108\r\n        },\r\n        {\r\n          \"longitude\": 120.70023546006945,\r\n          \"latitude\": 27.91632161458333,\r\n          \"isNormal\": false,\r\n          \"locationType\": 1,\r\n          \"stepCount\": 0,\r\n          \"distance\": 0,\r\n          \"acquisitionTime\": 1551850112\r\n        },\r\n        {\r\n          \"longitude\": 120.70006863064236,\r\n          \"latitude\": 27.91600802951389,\r\n          \"isNormal\": true,\r\n          \"locationType\": 1,\r\n          \"stepCount\": 1,\r\n          \"distance\": 38,\r\n          \"acquisitionTime\": 1551850116\r\n        },\r\n        {\r\n          \"longitude\": 120.6999134657118,\r\n          \"latitude\": 27.915694444444444,\r\n          \"isNormal\": true,\r\n          \"locationType\": 1,\r\n          \"stepCount\": 1,\r\n          \"distance\": 76,\r\n          \"acquisitionTime\": 1551850120\r\n        },\r\n        {\r\n          \"longitude\": 120.69976318359375,\r\n          \"latitude\": 27.91541232638889,\r\n          \"isNormal\": true,\r\n          \"locationType\": 1,\r\n          \"stepCount\": 1,\r\n          \"distance\": 110,\r\n          \"acquisitionTime\": 1551850124\r\n        },\r\n        {\r\n          \"longitude\": 120.69963433159722,\r\n          \"latitude\": 27.915142415364585,\r\n          \"isNormal\": true,\r\n          \"locationType\": 1,\r\n          \"stepCount\": 1,\r\n          \"distance\": 142,\r\n          \"acquisitionTime\": 1551850128\r\n        },\r\n\t\t\r\n\t\t......\r\n```\r\n当然其他学校数据也能看. 同理","mood":"","weather":"","hasNext":true,"hasPrev":true},"__N_SSG":true}